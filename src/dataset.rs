use std::default;
use rand::seq::SliceRandom;
use toolkit::*;
use ndarray::{prelude::*, Slice};
use super::*;


#[derive(Default)]
pub enum Dataset{
    #[default]
    Iris
}

struct LocalDataset{
    data: Dataset
}

impl LocalDataset{
    fn new()->Self{
        Self{
            data:Dataset::default()
        }
    
    }

    pub fn set_dataset(mut self, data:Dataset)->Self{
        self.data = data;
        self
    }


    fn split(p:i32){
        todo!()
    }

    pub fn load(self)->Data{
        match self.data{
            Dataset::Iris => iris_dataset()
        }
    }
}


pub fn train_test_split(data:&Data, pt:i32)->(Data,Data,Data,Data)//(Data,Data,Data,Data)
{
    let length = data.shape()[0];
    let length_column = data.shape()[1];
    let p = (pt as f32 / 100.0) * length as f32;

    let train_range = Slice::new(0, Some(p as isize), 1);
    let test_range = Slice::new(p as isize, Some(length as isize), 1);


    let train = data.slice_axis(Axis(0), train_range);
    let y_train = train.slice_axis(Axis(1), Slice::new(length_column as isize - 1,Some(length_column as isize ), 1)  );
    let x_train = train.slice_axis(Axis(1), Slice::new(0, Some(length_column as isize - 1),1));


    let test = data.slice_axis(Axis(0), test_range).to_owned();   
    let y_test = test.slice_axis(Axis(1), Slice::new(length_column as isize - 1,Some(length_column as isize ), 1)  );
    let x_test = test.slice_axis(Axis(1), Slice::new(0, Some(length_column as isize - 1),1));

    return (x_train.to_owned(),y_train.to_owned(), x_test.to_owned(),y_test.to_owned());
}




pub fn iris_dataset()->Data{
    // [ SepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm, Species ]

    let data = arr2(&[
            [5.1,3.5,1.4,0.2,0.0],
            [4.9,3.0,1.4,0.2,0.0],
            [4.7,3.2,1.3,0.2,0.0],
            [4.6,3.1,1.5,0.2,0.0],
            [5.0,3.6,1.4,0.2,0.0],
            [5.4,3.9,1.7,0.4,0.0],
            [4.6,3.4,1.4,0.3,0.0],
            [5.0,3.4,1.5,0.2,0.0],
            [4.4,2.9,1.4,0.2,0.0],
            [4.9,3.1,1.5,0.1,0.0],
            [5.4,3.7,1.5,0.2,0.0],
            [4.8,3.4,1.6,0.2,0.0],
            [4.8,3.0,1.4,0.1,0.0],
            [4.3,3.0,1.1,0.1,0.0],
            [5.8,4.0,1.2,0.2,0.0],
            [5.7,4.4,1.5,0.4,0.0],
            [5.4,3.9,1.3,0.4,0.0],
            [5.1,3.5,1.4,0.3,0.0],
            [5.7,3.8,1.7,0.3,0.0],
            [5.1,3.8,1.5,0.3,0.0],
            [5.4,3.4,1.7,0.2,0.0],
            [5.1,3.7,1.5,0.4,0.0],
            [4.6,3.6,1.0,0.2,0.0],
            [5.1,3.3,1.7,0.5,0.0],
            [4.8,3.4,1.9,0.2,0.0],
            [5.0,3.0,1.6,0.2,0.0],
            [5.0,3.4,1.6,0.4,0.0],
            [5.2,3.5,1.5,0.2,0.0],
            [5.2,3.4,1.4,0.2,0.0],
            [4.7,3.2,1.6,0.2,0.0],
            [4.8,3.1,1.6,0.2,0.0],
            [5.4,3.4,1.5,0.4,0.0],
            [5.2,4.1,1.5,0.1,0.0],
            [5.5,4.2,1.4,0.2,0.0],
            [4.9,3.1,1.5,0.1,0.0],
            [5.0,3.2,1.2,0.2,0.0],
            [5.5,3.5,1.3,0.2,0.0],
            [4.9,3.1,1.5,0.1,0.0],
            [4.4,3.0,1.3,0.2,0.0],
            [5.1,3.4,1.5,0.2,0.0],
            [5.0,3.5,1.3,0.3,0.0],
            [4.5,2.3,1.3,0.3,0.0],
            [4.4,3.2,1.3,0.2,0.0],
            [5.0,3.5,1.6,0.6,0.0],
            [5.1,3.8,1.9,0.4,0.0],
            [4.8,3.0,1.4,0.3,0.0],
            [5.1,3.8,1.6,0.2,0.0],
            [4.6,3.2,1.4,0.2,0.0],
            [5.3,3.7,1.5,0.2,0.0],
            [5.0,3.3,1.4,0.2,0.0],
            [7.0,3.2,4.7,1.4,1.0],
            [6.4,3.2,4.5,1.5,1.0],
            [6.9,3.1,4.9,1.5,1.0],
            [5.5,2.3,4.0,1.3,1.0],
            [6.5,2.8,4.6,1.5,1.0],
            [5.7,2.8,4.5,1.3,1.0],
            [6.3,3.3,4.7,1.6,1.0],
            [4.9,2.4,3.3,1.0,1.0],
            [6.6,2.9,4.6,1.3,1.0],
            [5.2,2.7,3.9,1.4,1.0],
            [5.0,2.0,3.5,1.0,1.0],
            [5.9,3.0,4.2,1.5,1.0],
            [6.0,2.2,4.0,1.0,1.0],
            [6.1,2.9,4.7,1.4,1.0],
            [5.6,2.9,3.6,1.3,1.0],
            [6.7,3.1,4.4,1.4,1.0],
            [5.6,3.0,4.5,1.5,1.0],
            [5.8,2.7,4.1,1.0,1.0],
            [6.2,2.2,4.5,1.5,1.0],
            [5.6,2.5,3.9,1.1,1.0],
            [5.9,3.2,4.8,1.8,1.0],
            [6.1,2.8,4.0,1.3,1.0],
            [6.3,2.5,4.9,1.5,1.0],
            [6.1,2.8,4.7,1.2,1.0],
            [6.4,2.9,4.3,1.3,1.0],
            [6.6,3.0,4.4,1.4,1.0],
            [6.8,2.8,4.8,1.4,1.0],
            [6.7,3.0,5.0,1.7,1.0],
            [6.0,2.9,4.5,1.5,1.0],
            [5.7,2.6,3.5,1.0,1.0],
            [5.5,2.4,3.8,1.1,1.0],
            [5.5,2.4,3.7,1.0,1.0],
            [5.8,2.7,3.9,1.2,1.0],
            [6.0,2.7,5.1,1.6,1.0],
            [5.4,3.0,4.5,1.5,1.0],
            [6.0,3.4,4.5,1.6,1.0],
            [6.7,3.1,4.7,1.5,1.0],
            [6.3,2.3,4.4,1.3,1.0],
            [5.6,3.0,4.1,1.3,1.0],
            [5.5,2.5,4.0,1.3,1.0],
            [5.5,2.6,4.4,1.2,1.0],
            [6.1,3.0,4.6,1.4,1.0],
            [5.8,2.6,4.0,1.2,1.0],
            [5.0,2.3,3.3,1.0,1.0],
            [5.6,2.7,4.2,1.3,1.0],
            [5.7,3.0,4.2,1.2,1.0],
            [5.7,2.9,4.2,1.3,1.0],
            [6.2,2.9,4.3,1.3,1.0],
            [5.1,2.5,3.0,1.1,1.0],
            [5.7,2.8,4.1,1.3,1.0],
            [6.3,3.3,6.0,2.5,2.0],
            [5.8,2.7,5.1,1.9,2.0],
            [7.1,3.0,5.9,2.1,2.0],
            [6.3,2.9,5.6,1.8,2.0],
            [6.5,3.0,5.8,2.2,2.0],
            [7.6,3.0,6.6,2.1,2.0],
            [4.9,2.5,4.5,1.7,2.0],
            [7.3,2.9,6.3,1.8,2.0],
            [6.7,2.5,5.8,1.8,2.0],
            [7.2,3.6,6.1,2.5,2.0],
            [6.5,3.2,5.1,2.0,2.0],
            [6.4,2.7,5.3,1.9,2.0],
            [6.8,3.0,5.5,2.1,2.0],
            [5.7,2.5,5.0,2.0,2.0],
            [5.8,2.8,5.1,2.4,2.0],
            [6.4,3.2,5.3,2.3,2.0],
            [6.5,3.0,5.5,1.8,2.0],
            [7.7,3.8,6.7,2.2,2.0],
            [7.7,2.6,6.9,2.3,2.0],
            [6.0,2.2,5.0,1.5,2.0],
            [6.9,3.2,5.7,2.3,2.0],
            [5.6,2.8,4.9,2.0,2.0],
            [7.7,2.8,6.7,2.0,2.0],
            [6.3,2.7,4.9,1.8,2.0],
            [6.7,3.3,5.7,2.1,2.0],
            [7.2,3.2,6.0,1.8,2.0],
            [6.2,2.8,4.8,1.8,2.0],
            [6.1,3.0,4.9,1.8,2.0],
            [6.4,2.8,5.6,2.1,2.0],
            [7.2,3.0,5.8,1.6,2.0],
            [7.4,2.8,6.1,1.9,2.0],
            [7.9,3.8,6.4,2.0,2.0],
            [6.4,2.8,5.6,2.2,2.0],
            [6.3,2.8,5.1,1.5,2.0],
            [6.1,2.6,5.6,1.4,2.0],
            [7.7,3.0,6.1,2.3,2.0],
            [6.3,3.4,5.6,2.4,2.0],
            [6.4,3.1,5.5,1.8,2.0],
            [6.0,3.0,4.8,1.8,2.0],
            [6.9,3.1,5.4,2.1,2.0],
            [6.7,3.1,5.6,2.4,2.0],
            [6.9,3.1,5.1,2.3,2.0],
            [5.8,2.7,5.1,1.9,2.0],
            [6.8,3.2,5.9,2.3,2.0],
            [6.7,3.3,5.7,2.5,2.0],
            [6.7,3.0,5.2,2.3,2.0],
            [6.3,2.5,5.0,1.9,2.0],
            [6.5,3.0,5.2,2.0,2.0],
            [6.2,3.4,5.4,2.3,2.0],
            [5.9,3.0,5.1,1.8,2.0],
        ]);

    return data
}

#[cfg(test)]
mod testing{
    use super::*;

    
    #[test]
    fn shuffle_test(){
        let data = iris_dataset();
        let (mut z,a,b,c) = train_test_split(&data, 7);
        let a = shuffle(&mut  z);

    }

    // #[test]
    fn train_test_split_test(){

        let data = iris_dataset();
        let (x_train,y_train,x_test, y_test) = train_test_split(&data, 90);
        dbg!(x_train.shape(),y_train.shape(), x_test.shape(),y_test.shape());

        assert_eq!(2,2);

    }

    // #[test]
    fn localdataset(){

        let dataset = LocalDataset::new();
        dataset.set_dataset(Dataset::Iris);

    }


    // #[test]
    fn get_iris_data(){


        let a = iris_dataset();

        println!(">> {:?}",a);



    }
}





